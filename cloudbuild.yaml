steps:
  # pull the previous docker image to utilize the cache
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
  - '-c'
  - 'docker pull gcr.io/$PROJECT_ID/newsletter:latest || exit 0' # exit 0 to ignore errors, if we are running the build for the first time
  # build the image with latest code
- name: 'gcr.io/cloud-builders/docker'
  args:
  - 'build'
  - '-t'
  - 'gcr.io/$PROJECT_ID/newsletter:latest'
  - '-f'
  - './Dockerfile'
  - '--cache-from'
  - 'gcr.io/$PROJECT_ID/newsletter:latest'
  - '.'
  timeout: 3600s
  # push the updated image
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'gcr.io/$PROJECT_ID/newsletter:latest']
  # deploy the service with latest image
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: bash
  args:
  - -c
  - |
    gcloud run deploy newsletter \
      --image gcr.io/$PROJECT_ID/newsletter:latest \
      --region us-central1 \
      --allow-unauthenticated \
      --memory 1Gi --cpu 1 --max-instances 1 \
      --set-env-vars APP_DATABASE__HOST=$$DBHOST,APP_DATABASE__PASSWORD=$$DBPASS,APP_DATABASE__PORT=$$DBPORT,APP_DATABASE__USERNAME=$$DBUSER,APP_DATABASE__DATABASE_NAME=$$DBDB
  secretEnv: ['DBHOST', 'DBPASS', 'DBPORT', 'DBUSER', 'DBDB']
availableSecrets:
  secretManager:
  - versionName: 'projects/$PROJECT_ID/secrets/newsletter-db-host/versions/latest'
    env: 'DBHOST'
  - versionName: 'projects/$PROJECT_ID/secrets/newsletter-db-pass/versions/latest'
    env: 'DBPASS'
  - versionName: 'projects/$PROJECT_ID/secrets/newsletter-db-port/versions/latest'
    env: 'DBPORT'
  - versionName: 'projects/$PROJECT_ID/secrets/newsletter-db-user/versions/latest'
    env: 'DBUSER'
  - versionName: 'projects/$PROJECT_ID/secrets/newsletter-db-database/versions/latest'
    env: 'DBDB'
options:
  machineType: 'E2_HIGHCPU_8'
